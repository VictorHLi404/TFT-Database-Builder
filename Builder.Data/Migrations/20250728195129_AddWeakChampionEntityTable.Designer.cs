// <auto-generated />
using System;
using System.Collections.Generic;
using Builder.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Builder.Data.Migrations
{
    [DbContext(typeof(StatisticsDbContext))]
    [Migration("20250728195129_AddWeakChampionEntityTable")]
    partial class AddWeakChampionEntityTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Builder.Data.Entities.ChampionEntity", b =>
                {
                    b.Property<Guid>("ChampionEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AveragePlacement")
                        .HasColumnType("numeric");

                    b.Property<string>("Champion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChampionLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("Items")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("TotalInstances")
                        .HasColumnType("integer");

                    b.HasKey("ChampionEntityId");

                    b.HasIndex("ContentHash")
                        .IsUnique();

                    b.ToTable("ChampionEntities");
                });

            modelBuilder.Entity("Builder.Data.Entities.TeamCompChampionJoinEntity", b =>
                {
                    b.Property<Guid>("TeamCompId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChampionEntityId")
                        .HasColumnType("uuid");

                    b.HasKey("TeamCompId", "ChampionEntityId");

                    b.HasIndex("ChampionEntityId");

                    b.ToTable("TeamCompChampions");
                });

            modelBuilder.Entity("Builder.Data.Entities.TeamCompEntity", b =>
                {
                    b.Property<Guid>("TeamCompId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AveragePlacement")
                        .HasColumnType("numeric");

                    b.Property<List<string>>("ChampionHashes")
                        .HasColumnType("jsonb");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<string>("HelperName")
                        .HasColumnType("text");

                    b.Property<int>("TotalInstances")
                        .HasColumnType("integer");

                    b.HasKey("TeamCompId");

                    b.HasIndex("ContentHash")
                        .IsUnique();

                    b.ToTable("TeamComps");
                });

            modelBuilder.Entity("Builder.Data.Entities.WeakChampionEntity", b =>
                {
                    b.Property<Guid>("WeakChampionEntityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<decimal>("AveragePlacement")
                        .HasColumnType("numeric");

                    b.Property<string>("Champion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ChampionLevel")
                        .HasColumnType("integer");

                    b.Property<string>("ContentHash")
                        .IsRequired()
                        .HasMaxLength(64)
                        .HasColumnType("character varying(64)");

                    b.Property<int>("TotalInstances")
                        .HasColumnType("integer");

                    b.HasKey("WeakChampionEntityId");

                    b.HasIndex("ContentHash")
                        .IsUnique();

                    b.ToTable("WeakChampionEntities");
                });

            modelBuilder.Entity("Builder.Data.Entities.TeamCompChampionJoinEntity", b =>
                {
                    b.HasOne("Builder.Data.Entities.ChampionEntity", "Champion")
                        .WithMany("Team")
                        .HasForeignKey("ChampionEntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Builder.Data.Entities.TeamCompEntity", "TeamComp")
                        .WithMany("Team")
                        .HasForeignKey("TeamCompId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Champion");

                    b.Navigation("TeamComp");
                });

            modelBuilder.Entity("Builder.Data.Entities.ChampionEntity", b =>
                {
                    b.Navigation("Team");
                });

            modelBuilder.Entity("Builder.Data.Entities.TeamCompEntity", b =>
                {
                    b.Navigation("Team");
                });
#pragma warning restore 612, 618
        }
    }
}
